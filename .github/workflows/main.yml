name: Rust Auto Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            executable: auto-presser-linux
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            executable: auto-presser-windows.exe

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential gcc pkg-config libx11-dev libxext-dev libxft-dev libxinerama-dev libxcursor-dev libxrender-dev libxfixes-dev libxdo-dev

      - name: Install Rust nightly
        run: rustup default nightly

      - name: Add Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Build project
        run: cargo build --release --target=${{ matrix.target }}

      - name: Rename binary
        if: matrix.os == 'ubuntu-latest'
        run: mv target/${{ matrix.target }}/release/auto-presser target/${{ matrix.target }}/release/${{ matrix.executable }}

      - name: Rename binary
        if: matrix.os == 'windows-latest'
        run: mv target/${{ matrix.target }}/release/auto-presser.exe target/${{ matrix.target }}/release/${{ matrix.executable }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.executable }}
          path: target/${{ matrix.target }}/release/${{ matrix.executable }}

  release:
    name: Create Release
    needs: build
    permissions:
      contents: write
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}